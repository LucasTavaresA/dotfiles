# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set period 1

# arquivos ocultos
set hidden on

# ícones
set icons on

# informação mostrada do lado do arquivo
set info "size"

# previa de arquivos
set previewer lf-previewer
set cleaner lf-cleaner

# fração das abas
set ratios 1:2

set wrapscroll on

# informação no topo das abas
set promptfmt "\033[32;1m\033[0m\033[34;1m%d\033[0m\033[1m%f\033[0m"

# borda ao redor das abas
set drawbox on

# abre espaço na parte superior e inferior da tela
set scrolloff 0

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        application/vnd.openxmlformats-officedocument.wordprocessingml.document) libreoffice $f ;;
        image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) zathura $fx ;;
        text/*) nvim $fx ;;
        image/*) nsxiv . ;;
        audio/*) mpv --audio-display=no $fx ;;
        video/*) mpv $fx ;;
        application/pdf|application/vnd*|application/epub*) zathura $fx ;;
        application/pgp-encrypted) nvim $fx ;;
        *) xdg-open $fx ;;
    esac
}}

cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "deletar?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd mkdir ${{
  printf "Nome do diretório: "
  read ans
  mkdir $ans
}}

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extrair?[y/N]"
    read ans
    [ $ans = "y" ] && aunpack $fx
}}

cmd mkfile ${{
  printf "Nome do arquivo: "
  read ans
  if [ $ans != "" ]; then
  touch $ans
  echo " " > $ans
  fi
}}

cmd chmod ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "tornar executavel?[y/N]"
    read ans
    if [ $ans = "y" ]; then
  for file in "$fx"
  do
     chmod +x $file
  done

  lf -remote 'send reload'
  fi
}}

map m
map o
map n
map "'"
map '"'
map e
map f

cmd open-with %"$@" $fx
map o push :open-with<space>

map <delete> delete
map t mkfile
map c chmod
map C clear
map m mkdir
map E extract
map i !nsxiv .

# Atalhos
map gC cd ~/.config
map gcc cd ~/code/c
map gcs cd ~/code/shell
map gcS cd ~/code/csharp
map gcw cd ~/code/webPages
map gcu cd ~/code/unity

map gd cd ~/documentos
map gD cd ~/downloads
map ge cd ~/extras
map gj cd ~/jogos
map gh cd ~
map gM cd ~/mnt

map gmv cd ~/media/videos
map gmi cd ~/media/imagens
map gmm cd ~/media/musicas
map gmc cd ~/media/cursos
