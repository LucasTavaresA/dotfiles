#+TITLE: Configura√ß√£o do doom emacs
#+PROPERTY: header-args:emacs-lisp
#+STARTUP: content

* Sumario
:PROPERTIES:
:TOC:      :include all :depth 2 :force (depth) :ignore (this) :local (depth)
:END:

:CONTENTS:
- [[#iniciar][Iniciar]]
- [[#pacotes][Pacotes]]
- [[#configura√ß√£o][Configura√ß√£o]]
:END:
* Iniciar

- =init.el=

Esse arquivo controla quais m√≥dulos do doom est√£o ativados e a ordem que carregam. Lembre de executar =doom sync= apos modificar

Para informa√ß√µes em uma fun√ß√£o/macro aperte =K= isso abre a sua documenta√ß√£o

Voc√™ pode usar =gd= para ver como √© implementado

#+begin_src emacs-lisp :tangle ./init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;;doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; üôÇ
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       ;;(ligatures +fira)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       ;;modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       ;;undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +aspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       ;;magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +unity)            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src
* Pacotes

- =packages.el=

Para instalar um pacote o declare aqui e execute =doom sync= na linha de comando, e reinicie o emacs para as mudan√ßas fazerem efeito ou use =M-x doom/reload=

Para instalar *algum-pacote* da MELPA, ELPA ou emacsmirror: =(package! algum-pacote)=

Para desabilitar um *pacote-do-doom* use =(package! pacote-do-doom :disable t)=

#+begin_src emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; Abre terminal externo
(package! terminal-here)

;; Popups
(package! posframe)

;; Log de comandos
(package! command-log-mode)

(package! vimrc-mode)

;; Cria sumarios em org
(package! org-make-toc)

;; Mostra marca√ß√£o em org
(package! org-appear)

;; Meu fork do doom-themes-solarized-dark
(package! doom-themes
  :recipe (:local-repo "~/.config/doom/themes/"))

;; Meu fork do yasnippet-snippets
(package! yasnippet-snippets
  :recipe (:local-repo "~/.config/doom/yasnippet-snippets"))

;; Arvore de undos
(package! undo-tree)

;; Corre√ß√£o ortogr√°fica
(package! flyspell)
(package! flyspell-popup)

;; Centraliza seguindo o cursor ainda muito lento
;; (package! centered-cursor-mode)

#+end_src
* Configura√ß√£o

- =config.el=

N√£o √© necess√°rio usar =doom sync= apos modificar esse arquivo

Para informa√ß√µes em uma fun√ß√£o/macro aperte =K= isso abre a sua documenta√ß√£o

Voc√™ pode usar =gd= para ver como √© implementado

- =load!= para carregar arquivos *.el relativos a esse
- =use-package!= para configurar pacotes
- =after!= para rodar c√≥digo apos um pacote ser carregado
- =add-load-path!= para adicionar diret√≥rios ao =load-path=, relativos a esse arquivo. Emacs procura pelo =load-path= quando usando =require= e =use-package=

** Apar√™ncia
#+begin_src emacs-lisp :tangle ./config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Fonte
(setq doom-font (font-spec :family "Fira Code Retina" :size 16))

;; Desativa a modeline
(setq-default mode-line-format nil)

;; Carregar um tema com `doom-theme' ou `load-theme'
(setq doom-theme 'doom-moonlight)

;; Desabilita numero de linhas
(setq display-line-numbers-type nil)

;; Formato e cor dos cursor em diferentes modos
(setq evil-emacs-state-cursor    '("#ffff00" box))
(setq evil-normal-state-cursor   '("#ffffff" box))
(setq evil-operator-state-cursor '("#ebcb8b" hollow))
(setq evil-visual-state-cursor   '("#ffffff" box))
(setq evil-insert-state-cursor   '("#ffffff" (bar . 2)))
(setq evil-replace-state-cursor  '("#ff0000" (hbar . 4)))
(setq evil-motion-state-cursor   '("#ad8beb" box))
#+end_src
** Miscel√¢nea
#+begin_src emacs-lisp :tangle ./config.el

;; Controle de projetos
(use-package! projectile
  :init
  (when (file-directory-p "~/code/")
    (setq projectile-project-search-path '("~/code/c/" "~/code/csharp/" "~/code/shell/" "~/code/unity/" "~/code/webpages/" "~/.config/doom/")))
  (setq projectile-switch-project-action #'projectile-dired))

;; Para GPG, email, clientes, templates e snippets
(setq user-full-name "Lucas Tavares"
      user-mail-address "tavares.lassuncao@gmail.com")

;; Muda systema de desfazer para o undo-tree
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)

;; Barra pisca em alertas
(setq visible-bell t)

;; Avisa e pergunta se quer recarregar o arquivo caso ele tenha mudado em disco
(global-auto-revert-mode)

;; Terminal do systema
(setq terminal-here-linux-terminal-command 'st)

;; Tamanho dos tabs
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)

;; Corre√ß√£o ortogr√°fica
(use-package! flyspell
  :defer t
  :config
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")))
(setq flyspell-sort-corrections nil) ; N√£o organizar corre√ß√µes por ordem alfabetica
(setq flyspell-issue-message-flag nil) ; N√£o mandar mensagens para cada palavra errada
(with-eval-after-load "ispell"
  ;; Uma lingua padr√£o deve ser configurada embora outras linguas sejam adicionadas mais abaixo
  (setenv "LANG" "pt_BR.UTF-8")          ; lingua padr√£o
  (setq ispell-program-name "hunspell")  ; ferramenta uilizada
  (setq ispell-dictionary "pt_BR,en_US") ; lista de linguas
  (ispell-set-spellchecker-params)       ; isso deve ser chamado antes de adicionar multi dicion√°rios
  (ispell-hunspell-add-multi-dic "pt_BR,en_US")
  ;; Local do dicionario pessoal, caso n√£o definida novas palavras s√£o adicionadas ao .hunspell_pt_BR
  (setq ispell-personal-dictionary "~/.config/hunspell/hunspell_personal"))
;; N√£o  carrega dicionario pessoal caso ele n√£o exista
(unless (file-exists-p ispell-personal-dictionary)
  (write-region "" nil ispell-personal-dictionary nil 0))

;; Desabilita fun√ß√µes incomodantes do lsp
(after! lsp-mode
  (setq lsp-enable-symbol-highlighting nil))
(after! lsp-ui
  (setq lsp-ui-sideline-enable nil))

;; Adiciona o modo vimrc
(add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))

;; Modo simples para o sxhkd
(define-generic-mode sxhkd-mode
  '(?#)
  '("alt" "Escape" "super" "bspc" "dwmc" "ctrl" "space" "shift" "Return" "Menu" "backslash" "slash" "comma" "period" "Tab" "Left" "Right" "Up" "Down" "Print") nil
  '("sxhkdrc") nil
  "Modo simples para o sxhkd.")
#+end_src
** Teclas

- use =map!= para configurar novos atalhos

#+begin_src emacs-lisp :tangle ./config.el
;; Abre/Fecha header atual
(defun orgm/org-cycle-current-headline ()
  (interactive)
  (org-cycle-internal-local))

;; Da a volta na tela para a proxima linha
(setq-default evil-cross-lines t)

;; Desabilita teclas
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "<M-up>") nil)
  (define-key org-mode-map (kbd "<M-down>") nil)
  (define-key org-mode-map (kbd "C-c C-c") nil)
  (define-key org-mode-map (kbd "<C-S-down>") nil)
  (define-key org-mode-map (kbd "<C-S-up>") nil))
(define-key evil-normal-state-map (kbd "<C-tab>") nil)
(define-key evil-normal-state-map (kbd "M-d") nil)
(define-key evil-visual-state-map (kbd "<C-tab>") nil)
(define-key evil-motion-state-map (kbd ";") nil)

;; Teclas
;; Comenta e vai para proxima linha
(global-set-key (kbd "C-c C-c") 'comentar-e-descer-linha)
(fset 'comentar-e-descer-linha
   (kmacro-lambda-form [?\C-x ?\C-\; down] 0 "%d"))

;; Move entre partes da mesma linha
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

(define-key evil-motion-state-map "?" 'evil-ex-search-word-forward)
(define-key evil-motion-state-map ":" '+vertico/search-symbol-at-point)
(define-key evil-normal-state-map ";" '+default/search-buffer)
(global-set-key (kbd "C-s") 'evil-mc-make-all-cursors)
(global-set-key (kbd "<C-S-down>") 'evil-mc-make-and-goto-next-match)
(global-set-key (kbd "<C-S-up>") 'evil-mc-make-and-goto-prev-match)
(global-set-key (kbd "<C-down>") 'evil-mc-skip-and-goto-next-match)
(global-set-key (kbd "<C-up>") 'evil-mc-skip-and-goto-prev-match)
(global-set-key (kbd "M-c") 'evil-yank)
(global-set-key (kbd "M-v") 'evil-paste-before)
(global-set-key (kbd "M-d") 'org-babel-demarcate-block)
(global-set-key (kbd "C-M-i") 'orgm/org-cycle-current-headline)
(global-set-key (kbd "<M-up>") 'er/expand-region)
(global-set-key (kbd "<M-down>") 'er/contract-region)
(global-set-key (kbd "<C-tab>") 'next-buffer)
(global-set-key (kbd "<C-M-right>") 'evil-window-vsplit)
(global-set-key (kbd "<C-M-down>") 'evil-window-split)
(define-key doom-leader-map (kbd "c b") 'doom/copy-buffer-contents)
(define-key doom-leader-map (kbd "e r") 'eval-region)
(define-key doom-leader-map (kbd "s s") 'flyspell-mode)
(define-key doom-leader-map (kbd "s b") 'flyspell-buffer)
(define-key doom-leader-map (kbd "h l") 'hl-line-mode)
(define-key doom-leader-map (kbd "k") 'kill-buffer)
(define-key doom-leader-map (kbd "l") 'org-insert-link)
(define-key doom-leader-map (kbd "L") 'log/toggle-command-window)
(define-key doom-leader-map (kbd "n") 'neotree-toggle)
(define-key doom-leader-map (kbd "P") 'projectile-command-map)
(define-key doom-leader-map (kbd "r") 'rainbow-mode)
(define-key doom-leader-map (kbd "U") 'undo-tree-visualize)
(define-key doom-leader-map (kbd "b t") 'org-babel-tangle)
(define-key doom-leader-map (kbd "w w") 'save-buffer)
(define-key doom-leader-map (kbd "w q") 'doom/save-and-kill-buffer)
(define-key doom-leader-map (kbd "q q") 'kill-buffer-and-window)
(define-key doom-leader-map (kbd "RET") 'terminal-here-launch)
(define-key doom-leader-map (kbd "SPC") 'org-toggle-checkbox)
(define-key doom-leader-map (kbd "TAB") 'other-window)

;; centralizar quando fora do modo de inser√ß√£o ainda em desenvolvimento
;; (global-centered-cursor-mode)
;; (add-hook 'evil-insert-state-entry-hook (lambda() (global-centered-cursor-mode)))
;; (add-hook 'evil-insert-state-exit-hook (lambda() (global-centered-cursor-mode)))

;; Popup que retorna comandos sendo usados
(use-package! command-log-mode
  :after posframe)

(setq log/command-window-frame nil)

(defun log/toggle-command-window ()
  (interactive)
  (if log/command-window-frame
      (progn
        (posframe-delete-frame clm/command-log-buffer)
        (setq log/command-window-frame nil))
      (progn
        (command-log-mode t)
        (with-current-buffer
          (setq clm/command-log-buffer
                (get-buffer-create " *command-log*"))
          (text-scale-set -1))
        (setq log/command-window-frame
          (posframe-show
            clm/command-log-buffer
            :position `(,(- (x-display-pixel-width) 590) . 15)
            :width 50
            :height 15
            :min-width 50
            :min-height 15
            :internal-border-width 1
            :internal-border-color "#ffffff"
            :override-parameters '((parent-frame . nil)))))))
#+end_src
** Org
#+begin_src emacs-lisp :tangle ./config.el

;; Trocar listas com h√≠fens por pontos
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))

(require 'org-indent)

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil ;; N√£o pergunta antes de avaliar
      org-ellipsis " Ôçõ"
      org-hide-emphasis-markers t ;; Esconde marca√ß√£o
      org-edit-src-content-indentation 0) ;; Indenta√ß√£o nos blocos de c√≥digo

;; Orgmode mais r√°pido
(after! org
  (setq org-fontify-quote-and-verse-blocks nil
        org-fontify-whole-heading-line nil
        org-hide-leading-stars nil
        org-startup-indented nil))

;; Snippets para templates de c√≥digo
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("bash" . "src bash"))
(add-to-list 'org-structure-template-alist '("zsh" . "src zsh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("li" . "src lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
(add-to-list 'org-structure-template-alist '("conf" . "src conf"))
(add-to-list 'org-structure-template-alist '("vim" . "src vimrc"))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; Cria sumarios automaticamente
(use-package! org-make-toc
  :hook (org-mode . org-make-toc-mode))

;; Mostra marca√ß√£o quando necess√°rio
(use-package! org-appear
  :hook (org-mode . org-appear-mode))

;; Pergunta se quer separar apos salvar arquivos org
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)))

#+end_src
