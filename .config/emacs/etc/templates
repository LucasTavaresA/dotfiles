fundamental-mode

(date (format-time-string "%a %d/%m/%Y - %H:%M"))
(bang "#!/usr/bin/env ")

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode

(ilamb "(lambda (" p ")" n> r> ")")
(lamb "(lambda (" p ")" n> r> ")")

csharp-mode

(ee "Environment.Exit(" p ");")
(cw "Console.Write(" p ");")
(cwl "Console.WriteLine(" p ");")
(cr "Console.Read(" p ");")
(crl "Console.ReadLine(" p ");")
(if "if (" p ") {\n" p > "\n}")
(ife "if (" p ") {\n" p > "\n} else if (" p ") {\n" p > "\n}")
(for "for (" p ";" p ";" p ") {\n" p > "\n}")
(fore "foreach (" p ") {\n" p > "\n}")
(main "namespace " p " {\n" > "static class " p " {\n" > "static void Main(string[] args) {\n" > "\n}" > "\n}" > "\n}")

emacs-lisp-mode

(mod ";;; my" p ".el -*- lexical-binding: t; -*-\n
\n
(provide 'my" p ")" > "
;;; my" p ".el ends here")
(pkg "(use-package " p ")")
(aload ";;;###autoload")
(ilamb "(lambda (" p ") (" p ")" n> r> ")")
(alias "(defalias '" p " '" p ")")
(const "(defconst " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(var "(defvar " p "\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

org-mode

(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n)
(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(center "#+begin_center" n> r> n> "#+end_center")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(el "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(lisp "#+begin_src lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(html "#+begin_src html" n> r> n "#+end_src" :post (org-edit-src-code))
(css "#+begin_src css" n> r> n "#+end_src" :post (org-edit-src-code))
(sh "#+begin_src shell-script" n> r> n "#+end_src" :post (org-edit-src-code))
(zsh "#+begin_src zsh" n> r> n "#+end_src" :post (org-edit-src-code))
(bash "#+begin_src bash" n> r> n "#+end_src" :post (org-edit-src-code))
(c "#+begin_src c" n> r> n "#+end_src" :post (org-edit-src-code))
(py "#+begin_src python" n> r> n "#+end_src" :post (org-edit-src-code))
(conf "#+begin_src conf" n> r> n "#+end_src" :post (org-edit-src-code))
(vim "#+begin_src vim" n> r> n "#+end_src" :post (org-edit-src-code))

html-mode web-mode

(html (html-html5-template))

sh-mode

(for "for " (p "needle") " in " (p "haystack")"; do" n>
     (p "#code")n
     "done")
(if "if [ " (p "condition")" ]; then"n> (r "#code")n "fi")
(case (sh-case))
(readfile "while IFS= read -r line || [ -n "(p "\"$line\"")" ]; do"n>
          (p "printf '%s\\n' \"$line\"")n
          "done < \"file\"")

(while "while [ "(p "\"$start\"") " -le " (p "\"$end\"")" ]; do"n>
       (p "#code")n
       "done")

python-mode

(for "for " (p "needle") " in " (p "heystack") ":"n>
     (p "# code goes here"))
(if "if " (p "condition" var) ":"n>
    (p "# code goes here"))

c-mode c++-mode

(if "if ("  (p "true") ") {" n> r> (p "true") n "}")
(print "printf(" (p "\"The value of ___ is\"" text) (r ", ")")")
(for "for (" "int " (p "i" var) "=" (p "0") "; "
     (s var) "< " (p "max" max) "; "
     (s var) "++" "){"
     n> (p "/* your code here*/")
     n "}")
(main "int main(int argc, char* argv[])"n"{" n> (r "/*Your Code Here*/") n"}")

(struct "struct "(p "Name")" {" n> (p "/* fields */") n "};")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "^[a-z].*$"
;; End:
