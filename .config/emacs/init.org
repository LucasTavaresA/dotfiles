#+title: Configuração do emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: content

* Gerenciamento de pacotes/systema
** Pacotes
#+begin_src emacs-lisp

(setq gc-cons-threshold (* 50 1000 1000)) ; Diminui a coleta de lixo 

(require 'package)
(setq package-archives ; Repositórios de pacotes
      '(("melpa" . "https://melpa.org/packages/")
	("org" . "https://orgmode.org/elpa/")
	("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize) ; Gerenciador de pacotes use-package
(setq use-package-always-ensure t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

(use-package auto-package-update               ; Atualizar os pacotes automaticamente
  :custom
  (auto-package-update-interval 7)             ; Espera para atualizar pacotes (em dias)
  (auto-package-update-prompt-before-update t) ; Pergunta antes de atualizar
  (auto-package-update-hide-results t)         ; Mostra pacotes que foram atualizados
  :config
  (auto-package-update-maybe)                  ; Checa se o horário de update passou e atualiza
  (auto-package-update-at-time "09:00"))       ; Horário de update

#+end_src
** Systema
#+begin_src emacs-lisp

(setq inhibit-startup-message t) ; Desativa a tela de inicio
(use-package no-littering) ; Move arquivos temporários/cache para pastas separadas

;; Move arquivo de auto salvamento para outra pasta
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
* Aparência
#+begin_src emacs-lisp

(tooltip-mode -1)                    ; Desativa as tooltips
(tool-bar-mode -1)                   ; Desativa a aba de ferramentas
(menu-bar-mode -1)                   ; Desativa o menu
(set-fringe-mode 0)                  ; Bordas das janelas
(scroll-bar-mode -1)                 ; Desativa a barra de scroll
(setq visible-bell t)                ; Barra pisca em erros
(global-hl-line-mode 1)              ; Indica a linha atual
(setq-default mode-line-format nil)  ; Remove a mode-line
(global-display-line-numbers-mode t) ; Numero de linhas
(set-face-attribute 'default nil :font "Fira Code Retina" :height 115) ; Fonte
(load-theme 'wombat) ; Tema original do emacs

(set-frame-parameter (selected-frame) 'alpha '(90 90)) ; Transparência
(add-to-list 'default-frame-alist '(alpha 90  90))

(use-package doom-themes ; Doom temas
  :ensure t
  :config
  (setq doom-themes-enable-bold t     ; se nil, negrito é globalmente desativado
        doom-themes-enable-italic t)  ; se nil, italico é globalmente desativado
  (load-theme 'doom-solarized-dark t) ; carrega o tema
  (doom-themes-visual-bell-config)    ; ativa piscar a barra em erros
  (doom-themes-org-config))           ; melhora as fontes do org-mode

(use-package emojify     ; Suporte a emojis
  :hook (after-init . global-emojify-mode))

(use-package all-the-icons ; Melhora suporte a ícones
  :if (display-graphic-p))

#+end_src
* Geral
** Auxiliar
#+begin_src emacs-lisp

(use-package saveplace ; Salva posição no buffer
  :init (save-place-mode))

(use-package evil-nerd-commenter) ; Comenta código

(use-package rainbow-mode) ; Previsão de cores

(use-package rainbow-delimiters ; Indica indentação de parenteses
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package git-gutter ; Indica diffs
  :config (global-git-gutter-mode +1))

(use-package multiple-cursors) ; Múltiplos cursores

(use-package expand-region) ; Expande região selecionada

(use-package helpful ; Melhorias no buffer de ajuda
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

(with-eval-after-load "ispell" ; Correção ortográfica
  ;; Uma lingua padrão deve ser configurada embora outras linguas sejam adicionadas mais abaixo
  (setenv "LANG" "pt_BR.UTF-8")          ; lingua padrão
  (setq ispell-program-name "hunspell")  ; ferramenta uilizada
  (setq ispell-dictionary "pt_BR,en_US") ; lista de linguas
  (ispell-set-spellchecker-params)       ; isso deve ser chamado antes de adicionar multi dicionários
  (ispell-hunspell-add-multi-dic "pt_BR,en_US")
  ;; Local do dicionario pessoal, caso não definida novas palavras são adicionadas ao .hunspell_pt_BR
  (setq ispell-personal-dictionary "~/.config/hunspell/hunspell_personal"))

(use-package flyspell-popup) ; Popup do corretor ortográfico

(use-package dap-mode) ; Debugar código
(setq dap-auto-configure-features '(sessions locals controls tooltip))
(require 'dap-netcore) ; C# debugger

#+end_src
** Gerenciamento de arquivos/projetos
#+begin_src emacs-lisp

(use-package dired ; Gerenciador de arquivos
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first")))
(use-package dired-single
  :after dired)

(use-package all-the-icons-dired ; Melhora icones no explorador de arquivos
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package projectile ; Facilita o controle de projetos
  :diminish projectile-mode
  :config (projectile-mode)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

(defcustom neo-window-width 25 ; define a largura da neotree
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)
(use-package neotree ; Explorador arvore de arquivos
  :config
  (setq neo-smart-open t
        neo-window-width 30
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
  (add-hook 'neo-after-create-hook
            #'(lambda (_)
                (with-current-buffer (get-buffer neo-buffer-name)
		      (setq truncate-lines t) ; trunca nomes de arquivo muito grandes
                  (setq word-wrap nil)
                  (make-local-variable 'auto-hscroll-mode)
		      (display-line-numbers-mode -1) ; desativa numero de linhas
		      (setq auto-hscroll-mode nil)))))
(setq-default neo-show-hidden-files t) ; mostrar arquivos ocultos

#+end_src
* Teclas
#+begin_src emacs-lisp

(use-package evil ; Evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  (("s-c" . evilnc-comment-or-uncomment-lines))
  (("M-v" . evil-paste-before))
  (("M-c" . evil-yank))
  (("<M-tab>" . evil-toggle-fold))
  (("C-s" . swiper))
  (("<s-up>" . er/expand-region))
  (("<s-down>" . other-window))
  (("<C-tab>" . evil-next-buffer))
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-keybinding nil) ; Desativa comandos no insert mode
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(global-unset-key (kbd "C-SPC"))
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; ESQ fecha prompts
(define-key flyspell-mode-map (kbd "M-s") #'flyspell-popup-correct)

(use-package general ; Facilita configuração de teclas
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))
(rune/leader-keys
  "T" '(enable-theme :which-key "Escolher tema")
  "L" '(global-command-log-mode :which-key "Log de comandos")
  "l" '(clm/toggle-command-log-buffer :which-key "Buffer de comandos")
  "t" '(org-babel-tangle :which-key "Tangle file")
  "E" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Carregar configuração do emacs")
  "e" '(eval-buffer :which-key "Avaliar buffer") 
  "p" '(projectile-command-map :which-key "Projectile")
  "R" '(rainbow-mode :which-key "Rainbow mode")
  "r" '(counsel-colors-emacs :which-key "Escolher cores")
  "s" '(flyspell-mode :which-key "Corretor ortográfico")
  "m" '(mc/mark-more-like-this-extended :which-key "Multiplos cursores")
  "n" '(neotree-toggle :which-key "Ativa/Desativa a neotree")
  "w q" '(evil-save-and-quit :which-key "Salvar e sair")
  "q q" '(evil-quit :which-key "Sair sem salvar")
  "w w" '(evil-save :which-key "Salvar")
  "SPC" '(org-toggle-checkbox :which-key "Marcar")
  "<tab>" '(counsel-switch-buffer :which-key "Mudar de buffer")
  "<S-right>" '(evil-window-vsplit :which-key "Dividir a direita") 
  "<S-down>"  '(evil-window-split :which-key "Dividir Abaixo"))

(use-package evil-collection ; Teclas do vim para outros modos
  :after evil
  :config
  (evil-collection-init))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(use-package undo-fu) ; Refazer/Desfazer como no vim, Não necessário no emacs 28, Adicionar suporte a ligaturas no emacs 28

(use-package which-key ; Menu de compleção de atalhos
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0)
  (setq which-key-idle-secondary-delay 0))

(use-package command-log-mode ; Retorna comandos sendo usados
  :commands (command-log-mode clm/toggle-command-log-buffer))

#+end_src
* Compleção
#+begin_src emacs-lisp

(use-package ivy ; Front-end para compleção ivy
  :diminish
  :bind (:map ivy-switch-buffer-map
              ("C-d" . ivy-switch-buffer-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich ; Melhora a interface do ivy
  :after ivy
  :init
  (ivy-rich-mode 1)
  :config
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'ivy-switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)) ; Retorna os indicadores de buffers
                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning)) ; Retorna informações do major mode
                      (ivy-rich-switch-buffer-project (:width 15 :face success)) ; Retorna o nome do projeto usando `projectile'
                      ;; Retorna o caminho do arquivo relativo a raiz do projeto ou `default-directory' se projeto é nil
                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))))))

(use-package counsel ; Mais funções de compleção para o ivy
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)))

(use-package prescient) ; Prioriza comandos mais utilizados

(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode 1)
  (setq ivy-prescient-retain-classic-highlighting t)
  (prescient-persist-mode 1)) ; Lembra dos comandos caso o emacs seja fechado

(use-package vertico ; Menu de compleção
  :config
  (vertico-mode))

(use-package lsp-mode ; Servidor de compleção de linguagens
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ivy ; Integração do lsp no ivy
  :after ivy)

(use-package lsp-ui ; Melhora a interface do lsp
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (setq lsp-ui-doc-position 'bottom))

(use-package omnisharp)

(use-package company ; Popup de compleção
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map lsp-mode-map
              ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-prescient ; Prioriza comandos mais utilizados
  :after company
  :config
  (company-prescient-mode 1))

(use-package company-box ; Melhora a interface do company
  :hook (company-mode . company-box-mode))

(use-package counsel-projectile ; Integração do projectile ao ivy
  :after projectile
  :config
  (counsel-projectile-mode 1))

(use-package yasnippet ; Templates de código
  :diminish (yas-minor-mode . "")
  :config
  (yas-reload-all)
  (require 'warnings))
(use-package yasnippet-snippets)
(yas-global-mode t)
(defvar my/company-point nil)
(advice-add 'company-complete-common :before (lambda () (setq my/company-point (point))))
(advice-add 'company-complete-common :after (lambda ()
                                              (when (equal my/company-point (point))
                                                (yas-expand))))

#+end_src
* Orgmode
#+begin_src emacs-lisp

(defun orgm/org-mode-setup () ; Função ao iniciar o orgmode
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(use-package org ; Orgmode
  :hook (org-mode . orgm/org-mode-setup)
  :config
  (setq org-ellipsis " "
        org-hide-emphasis-markers t))

(use-package org-bullets ; Aparencia dos marcadores
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(font-lock-add-keywords 'org-mode ; Trocar listas com hífens por pontos
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(require 'org-indent) ; Melhor indentação orgmode

(with-eval-after-load 'org ; Roda snippets de codigo
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (org . t))))

;; Indicação de sintaxe em blocos de código, não pergunta se quer avaliar código
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)

(require 'org-tempo) ; Templates para o orgmode

;; Snippets para templates de codigo
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("org" . "src org"))

;; Automaticamente separa a configuração do init.org quando o salva
(defun orgm/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/emacs/init.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'orgm/org-babel-tangle-config)))

(setq gc-cons-threshold (* 50 1000 1000)) ; Volta com a velocidade normal da coleta de lixo
(message "Emacs totalmente configurado!") ; Confirmação
#+end_src
