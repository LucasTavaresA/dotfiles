#+title: Configuração do emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: content

* Iniciar
#+begin_src emacs-lisp

;; -*- lexical-binding: t; -*-

;; Diminui a coleta de lixo
(setq gc-cons-threshold (* 50 1000 1000))

;; Compilação nativa no emacs 28
;; Silencia os avisos de compilação nativa
;; (setq native-comp-async-report-warnings-errors nil)
;; Ajusta o diretório correto para salvar o cache de compilação
;; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src
* Pacotes

Para listar pactes usando o straight use =M-x straight-use-package=, Não os instale dessa maneira sem os referenciar no init.el

Para atualizar todos os pacotes use =M-x straight-pull-all=

Para remover *Pacotes não referenciados pelo use-package ao iniciar* use =M-x straight-remove-unused-repos=

#+begin_src emacs-lisp

;; Boostrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Integra a expressão use-package ao straight
(straight-use-package 'use-package)
;; Automaticamente instala todos os pacotes
;; Sem usar o :straight t, equivalente ao :ensure t
(setq straight-use-package-by-default t)

;; Atualizar os pacotes automaticamente
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)                 ; Espera para atualizar pacotes (em dias)
  (auto-package-update-prompt-before-update t)     ; Pergunta antes de atualizar
  (auto-package-update-hide-results t)             ; Mostra pacotes que foram atualizados
  :config
  (setq auto-package-update-delete-old-versions t) ; Remove versões antigas
  (auto-package-update-maybe)                      ; Checa se o horário de update passou e atualiza
  (auto-package-update-at-time "09:00"))           ; Horário de update

#+end_src
* Limpeza
#+begin_src emacs-lisp

;; Move arquivos temporários/cache para pastas separadas
(use-package no-littering)

;; Move arquivo de auto salvamento para outra pasta
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
* Aparência
#+begin_src emacs-lisp

(tooltip-mode -1)     ; Desativa as tooltips
(tool-bar-mode -1)    ; Desativa a aba de ferramentas
(menu-bar-mode -1)    ; Desativa o menu
(set-fringe-mode 0)   ; Bordas das janelas
(scroll-bar-mode -1)  ; Desativa a barra de scroll
(setq visible-bell t) ; Barra pisca em erros
(setq inhibit-startup-message t)     ; Desativa a tela de inicio
(setq-default mode-line-format nil)  ; Remove a mode-line
(global-display-line-numbers-mode t) ; Numero de linhas
(set-face-attribute 'default nil :font "Fira Code Retina" :height 115) ; Fonte

;; Transparência
(set-frame-parameter (selected-frame) 'alpha '(90 90))
(add-to-list 'default-frame-alist '(alpha 90  90))

;; Tema original do emacs
(load-theme 'wombat)
;; Doom temas
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t     ; se nil, negrito é globalmente desativado
        doom-themes-enable-italic t)  ; se nil, italico é globalmente desativado
  (load-theme 'doom-solarized-dark t) ; carrega o tema
  (doom-themes-visual-bell-config)    ; ativa piscar a barra em erros
  (doom-themes-neotree-config)        ; tema na neotree
  (doom-themes-org-config))           ; melhora as fontes do org-mode

;; Suporte a emojis
(use-package emojify
  :hook (after-init . global-emojify-mode))

;; Melhora suporte a ícones
(use-package all-the-icons)

#+end_src
* Miscelânea
#+begin_src emacs-lisp

;; Salva posição no buffer
(use-package saveplace
  :init (save-place-mode))

;; Comenta código
(use-package evil-nerd-commenter)

;; Previsão de cores
(use-package rainbow-mode)

;; Indica indentação de parenteses
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Indica diffs
(use-package git-gutter
  :config (global-git-gutter-mode +1))

;; Múltiplos cursores
(use-package multiple-cursors)

;; Expande região selecionada
(use-package expand-region)

;; Melhorias no buffer de ajuda
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

;; Correção ortográfica
(with-eval-after-load "ispell"
  ;; Uma lingua padrão deve ser configurada embora outras linguas sejam adicionadas mais abaixo
  (setenv "LANG" "pt_BR.UTF-8")          ; lingua padrão
  (setq ispell-program-name "hunspell")  ; ferramenta uilizada
  (setq ispell-dictionary "pt_BR,en_US") ; lista de linguas
  (ispell-set-spellchecker-params)       ; isso deve ser chamado antes de adicionar multi dicionários
  (ispell-hunspell-add-multi-dic "pt_BR,en_US")
  ;; Local do dicionario pessoal, caso não definida novas palavras são adicionadas ao .hunspell_pt_BR
  (setq ispell-personal-dictionary "~/.config/hunspell/hunspell_personal"))

;; Popup do corretor ortográfico
(use-package flyspell-popup)

#+end_src
* Gerenciamento de arquivos/projetos
#+begin_src emacs-lisp

;; Gerenciador de arquivos
(use-package dired
  :straight nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first")))
(use-package dired-single
  :after dired)

;; Melhora icones no explorador de arquivos
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

;; Facilita o controle de projetos
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

;; Explorador arvore de arquivos
(defcustom neo-window-width 25 ; define a largura da neotree
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)
(use-package neotree
  :after all-the-icons
  :config
  (setq neo-smart-open t
        neo-window-width 30
        inhibit-compacting-font-caches t
	    neo-theme 'icons
	    projectile-switch-project-action 'neotree-projectile-action)
  (add-hook 'neo-after-create-hook
            #'(lambda (_)
                (with-current-buffer (get-buffer neo-buffer-name)
		      (setq truncate-lines t) ; trunca nomes de arquivo muito grandes
                  (setq word-wrap nil)
                  (make-local-variable 'auto-hscroll-mode)
		      (display-line-numbers-mode -1) ; desativa numero de linhas
		      (setq auto-hscroll-mode nil)))))
(setq-default neo-show-hidden-files t) ; mostrar arquivos ocultos

#+end_src
* Teclas
#+begin_src emacs-lisp

(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  (("C-s" . swiper))
  (("s-c" . evilnc-comment-or-uncomment-lines))
  (("M-v" . evil-paste-before))
  (("M-c" . evil-yank))
  (("M-d" . org-babel-demarcate-block))
  (("<M-tab>" . evil-toggle-fold))
  (("<s-up>" . er/expand-region))
  (("<s-down>" . er/contract-region))
  (("<s-left>" . evil-next-buffer))
  (("<s-right>" . evil-prev-buffer))
  (("<C-tab>" . other-window))
  (("<C-s-right>" . evil-window-vsplit))
  (("<C-s-down>"  . evil-window-split))
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-keybinding nil) ; Desativa comandos no insert mode
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(global-unset-key (kbd "C-SPC"))
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; ESQ fecha prompts
(define-key flyspell-mode-map (kbd "M-s") #'flyspell-popup-correct)

;; Facilita configuração de teclas
(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))
(rune/leader-keys
  "T" '(enable-theme :which-key "Escolher tema")
  "L" '(global-command-log-mode :which-key "Log de comandos")
  "l" '(clm/toggle-command-log-buffer :which-key "Buffer de comandos")
  "t" '(org-babel-tangle :which-key "Tangle file")
  "E" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Carregar configuração do emacs")
  "e" '(eval-buffer :which-key "Avaliar buffer")
  "p" '(projectile-command-map :which-key "Projectile")
  "R" '(rainbow-mode :which-key "Rainbow mode")
  "r" '(counsel-colors-emacs :which-key "Escolher cores")
  "s" '(flyspell-mode :which-key "Corretor ortográfico")
  "m" '(mc/mark-more-like-this-extended :which-key "Multiplos cursores")
  "n" '(neotree-toggle :which-key "Ativa/Desativa a neotree")
  "w q" '(evil-save-and-quit :which-key "Salvar e sair")
  "q q" '(evil-quit :which-key "Sair sem salvar")
  "w w" '(evil-save :which-key "Salvar")
  "SPC" '(org-toggle-checkbox :which-key "Marcar")
  "<tab>" '(counsel-switch-buffer :which-key "Mudar de buffer"))

;; Suporte do evil em outros modos
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(use-package undo-fu) ; Refazer/Desfazer como no vim, Não necessário no emacs 28, Adicionar suporte a ligaturas no emacs 28

;; Menu de compleção de atalhos
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0)
  (setq which-key-idle-secondary-delay 0))

;; Retorna comandos sendo usados
(use-package command-log-mode
  :commands (command-log-mode clm/toggle-command-log-buffer))

#+end_src
* Compleção
#+begin_src emacs-lisp

;; Front-end para compleção ivy
(use-package ivy
  :diminish
  :bind (:map ivy-switch-buffer-map
              ("C-d" . ivy-switch-buffer-kill))
  :config
  (ivy-mode 1))

;; Melhora a interface do ivy
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1)
  :config
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'ivy-switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)) ; Retorna os indicadores de buffers
                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning)) ; Retorna informações do major mode
                      (ivy-rich-switch-buffer-project (:width 15 :face success)) ; Retorna o nome do projeto usando `projectile'
                      ;; Retorna o caminho do arquivo relativo a raiz do projeto ou `default-directory' se projeto é nil
                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))))))

;; Mais funções de compleção para o ivy
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)))

;; Prioriza comandos mais utilizados
(use-package prescient)
(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode 1)
  (setq ivy-prescient-retain-classic-highlighting t)
  (prescient-persist-mode 1)) ; Lembra dos comandos caso o emacs seja fechado

;; Menu de compleção
(use-package vertico
  :config
  (vertico-mode))

;; Popup de compleção
(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map lsp-mode-map
              ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

;; Prioriza comandos mais utilizados
(use-package company-prescient
  :after company
  :config
  (company-prescient-mode 1))

;; Melhora a interface do company
(use-package company-box
  :hook (company-mode . company-box-mode))

;; Integração do projectile ao ivy
(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode 1))

;; Templates de código
(use-package yasnippet
  :diminish (yas-minor-mode . "")
  :config
  (yas-reload-all)
  (require 'warnings))
(use-package yasnippet-snippets)
(yas-global-mode t)
(defvar my/company-point nil)
(advice-add 'company-complete-common :before (lambda () (setq my/company-point (point))))
(advice-add 'company-complete-common :after (lambda ()
                                              (when (equal my/company-point (point))
                                                (yas-expand))))

#+end_src
* Linguagens
#+begin_src emacs-lisp

;; Debugar código
(use-package dap-mode)
(setq dap-auto-configure-features '(sessions locals controls tooltip))

;; Servidor de compleção de linguagens
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))

;; Integração do lsp no ivy
(use-package lsp-ivy
  :after ivy)

;; Melhora a interface do lsp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (setq lsp-ui-doc-position 'bottom))

;; C#
(use-package omnisharp)
;; C# debugger
(require 'dap-netcore)

#+end_src
* Orgmode
#+begin_src emacs-lisp

;; Função ao iniciar o orgmode
(defun orgm/org-mode-setup ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(use-package org
  :hook (org-mode . orgm/org-mode-setup)
  :config
  (setq org-ellipsis " "
        org-hide-emphasis-markers t))

;; Aparencia dos marcadores
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Trocar listas com hífens por pontos
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(require 'org-indent)

(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (org . t))))

;; Indicação de sintaxe em blocos de código, não pergunta se quer avaliar código
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)

;; Templates para o orgmode
(require 'org-tempo)

;; Snippets para templates de codigo
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("org" . "src org"))

;; Automaticamente separa a configuração do init.org quando o salva
(defun orgm/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/emacs/init.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'orgm/org-babel-tangle-config)))

#+end_src
* Final
#+begin_src emacs-lisp

;; Volta com a velocidade normal da coleta de lixo
(setq gc-cons-threshold (* 2 1000 1000))

;; Confirma se tudo foi configurado com sucesso
(message "Emacs totalmente configurado!")

#+end_src
