;;; -*-  mode: lisp; -*-
;; Módulos ;;
;; chamar módulos stumpwm:
(in-package :stumpwm)

;; módulos da comunidade
;; git clone git@github.com:stumpwm/stumpwm-contrib.git ~/.config/stumpwm/stumpwm-contrib
;; esse comando carrega todos os módulos em pastas e subpastas
(init-load-path #p"~/.config/stumpwm/modules")
;; manipular janelas em todos os grupos
(load-module "globalwindows")

;; quicklisp & sbcl
(load "~/.config/sbcl/sbclrc")
(add-to-load-path "~/.local/share/quicklisp/")

;; arquivos
(defun arquivo-disponivel-p (arquivo)
  "Retorna T, se o arquivo está disponível para leitura"
  (handler-case
      (with-open-file (f arquivo)
        (read-line f))
    (stream-error () nil)))
(defun executavel-p (nome)
  "Diz se NOME é executável"
  (let ((which-out (string-trim '(#\  #\linefeed) (run-shell-command (concat "which " nome) t))))
    (unless (string-equal "" which-out) which-out)))

;; janelas flutuantes sempre visiveis
(defun flutuante-p (janela)
  "Retorna T se JANELA é flutuante e NIL caso contrario"
  (typep janela 'stumpwm::float-window))
(defun desativa-sempre-no-topo (janela) ()
  "Desativa dada JANELA como sempre visível"
  (let ((ontop-wins (group-on-top-windows (current-group))))
    (setf (group-on-top-windows (current-group))
          (remove janela ontop-wins))))
(defun ativa-sempre-no-topo (janela) ()
  "Ativa dada JANELA como sempre visível"
  (let ((j janela)
        (janelas (group-on-top-windows (current-group))))
    (when j
      (unless (find j janelas)
        (push janela (group-on-top-windows (current-group)))))))
(defcommand alterna-flutuante () ()
  "Alterna entre janela fixa/flutuante e coloca sempre no topo"
  (let ((jan    (current-window))
        (grupo  (current-group)))
    (cond
      ((flutuante-p jan)
       (desativa-sempre-no-topo jan)
       (stumpwm::unfloat-window jan grupo))
      (t (ativa-sempre-no-topo jan)
      (stumpwm::float-window jan grupo)))))

;; mostra e esconde janelas
(defun window-menu-format (w)
  (list (format-expand *window-formatters* *window-format* w) w))
(defun window-from-menu (windows)
  (when windows
    (second (select-from-menu
             (group-screen (window-group (car windows)))
             (mapcar 'window-menu-format windows)
             "Selecionar Janela: "))))
(defun windows-in-group (group)
  (group-windows (find group (screen-groups (current-screen))
                       :key 'group-name :test 'equal)))
(defcommand mostra () ()
  (let* ((windows (windows-in-group ".Hidden"))
         (window  (window-from-menu windows)))
    (when window
      (move-window-to-group window (current-group))
      (stumpwm::pull-window window))))
(defcommand esconde () ()
  (stumpwm:run-commands "gmove .Hidden"))

;; Tema ;;
;; cores
(setf *colors*
      '("#ffffff"
        "#ff0000"
        "#00aa00"
        "#ffff00"
        "#0000ff"
        "#ff99ff"
        "#00ffbd"
        "#ffffff"))
(setf *default-bg-color* "#ff00ff")
(update-color-map (current-screen))

;; prompts e caixas de dialogo
(set-font "-xos4-terminus-bold-*-*-*-14-*-*-*-*-*-*-*")
(setf *message-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 1
      *maxsize-border-width* 1
      *normal-border-width* 1
      *transient-border-width* 1
      stumpwm::*float-window-border* 1
      stumpwm::*float-window-title-height* 1)
(setf *input-window-gravity* :center
      *message-window-input-gravity* :left)
(setf *input-completion-show-empty* t)

;; Grupos e regras ;;
(grename "Browser")
(gnewbg "Code")
(gnewbg "Fullscreen")
(gnewbg "Message")
(gnewbg ".Hidden")

;; remove todas as regras
(clear-window-placement-rules)
;(frame-number raise lock &key create restore dump-name class instance type role title)
(define-frame-preference "Browser"
    (0 t t :class "qutebrowser")
    (0 t t :class "firefox"))
(define-frame-preference "Code"
    (0 t t :class "nvim")
    (0 t t :class "Emacs")
    (1 t t :class "st-256color"))
(define-frame-preference "Fullscreen"
    (0 t t :class "mpv")
    (0 t t :class "Gimp")
    (0 t t :class "Xephyr"))
(define-frame-preference "Message"
    (0 t t :class "discord")
    (0 t t :class "TelegramDesktop"))

;; Miscelânea ;;
(setf *mouse-focus-policy* :click)
(setf *resize-increment* 25)
(defvar *dynamic-group-master-split-ratio* 1/2)

;; para rodar comandos do shell
;;(run-shell-command "comando")

;; troca de grupos globalmente
(setf *run-or-raise-all-groups* t)

;; integração com o emacs
(defcommand emacs () () ; substitui o comando emacs padrão
  "Inicia o emacs se o client não esta rodando e foca no emacs caso esteja rodando no grupo atual"
  (run-or-raise "emacsclient -c -a 'emacs'" '(:class "Emacs")))
;; trata divisórias do emacs como janelas do xorg
(defun emacs-p (jan)
  "T se JAN é emacs"
  (when jan
    (string-equal (window-class jan) "Emacs")))
(defun eval-elisp (expressao)
  "avalia uma string como emacs-lisp"
  (run-shell-command (concat "emacsclient -e '" expressao "'") t))
(defun emacs-winmove (direcao)
  "executa a função do emacs winmove-DIRECTION onde direcao é uma string"
  (eval-elisp (concat "(windmove-" direcao ")")))
(defun melhor-move-focus (ogdir)
  "Similar ao move-focus porem trata janelas do emacs como janelas Xorg"
  (declare (type (member :up :down :left :right) ogdir))
  (flet ((mv () (move-focus ogdir)))
    (if (emacs-p (current-window))
        (when
            ;; Não tem uma janela emacs nessa direção
            (= (length (emacs-winmove
                        (string-downcase (string ogdir))))
               1)
          (mv))
        (mv))))
(defcommand my-mv (dir) ((:direction "Direção: "))
  (when dir (melhor-move-focus dir)))

(defcommand reload-config () ()
  (load "~/.config/stumpwm/config"))

;; Teclas ;;
(set-prefix-key (kbd "C-space"))
(define-key *groups-map* (kbd "d") "gnew-dynamic")
(define-key *groups-map* (kbd "s") "gselect")
(define-key *root-map* (kbd "C-space") "windowlist")
(define-key *top-map* (kbd "s-ESC") "mostra")
(define-key *top-map* (kbd "M-ESC") "esconde")

;; Final ;;
(defvar *OS* (uiop:getenv "OS"))
(defun iniciar ()
    "Abre a programas no inicio do stumpwm"
    (cond ((string= *OS* "archlinux")
           (run-shell-command "polybar pc &")
           (run-shell-command "sleep 5 && polybar-msg cmd hide"))
          ((string= *OS* "linuxmint")
           (run-shell-command "polybar notebook &")
           (run-shell-command "sleep 5 && polybar-msg cmd hide")
           ; Teclas no notebook
           ; alt + , = Escape
           (run-shell-command "xmodmap -e 'keycode 59 = comma less comma less Escape'")
           ; alt + . = Tab
           (run-shell-command "xmodmap -e 'keycode 60 = period greater period greater Tab'")
           ; alt + ; = "
           (run-shell-command "xmodmap -e 'keycode 61 = semicolon colon semicolon colon quotedbl'"))))
(iniciar)

;; remove logs caso existam
(uiop:delete-directory-tree (pathname "~/.stumpwm.d/") :validate t)
